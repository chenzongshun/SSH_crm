<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				 http://www.springframework.org/schema/beans/spring-beans.xsd 
				 http://www.springframework.org/schema/context 
				 http://www.springframework.org/schema/context/spring-context.xsd 
				 http://www.springframework.org/schema/aop 
				 http://www.springframework.org/schema/aop/spring-aop.xsd 
				 http://www.springframework.org/schema/tx 
				 http://www.springframework.org/schema/tx/spring-tx.xsd ">
				 
	<!-- =====================================================spring整合aop事务=========================================================== -->
	<!-- 核心事务管理器 -->
	<bean name = "transactionManager" class = "org.springframework.orm.hibernate5.HibernateTransactionManager">
		<!-- 管理事务是根据sessionFactory来进行管理，所以需要注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 配置通知 -->
	 <tx:advice transaction-manager="transactionManager" id="txAdvice">
		<tx:attributes>
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="persist*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="modify*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="remove*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="get*" isolation="DEFAULT" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" isolation="DEFAULT" propagation="REQUIRED" read-only="true"/>
			<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
		</tx:attributes>
	</tx:advice>  
	<!-- 配置织入 配置切点表达式 配置切面：通知+切点    advice-ref：通知的名称    pointcut-ref：切点的名称 -->
	 <aop:config>
		<aop:pointcut expression="execution(* shun.service.impl.*ServiceImpl.*(..))" id="txPc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
	</aop:config> 
				
	
	<!-- =====================================================spring注解版aop事务=========================================================== -->
	<!-- 只要核心事务管理器的名字是transactionManager就不需要写transaction-manager，会自动寻找 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	 
	
	<!-- =====================================================引入c3p0连接池到spring=========================================================== -->
	<!-- 配置c3p0连接池 -->
	<context:property-placeholder location="classpath:db.properties"/> 
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- 将sessionFactory配置到spring容器中它是由spring提供的，它封装了hibernate的sessionfactory -->
	<!-- 加载配置的方案2 在spring配置中放置hibernate的配置信息 -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 将连接池注入到sessionFactory,hibernate会通过连接池获得连接 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置hibernate的基本信息 -->
		<property name="hibernateProperties">
			<props>
				<!-- 必选配置 -->
				<!-- <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql:///18-02-22-ssh框架整合</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">1234</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 可选配置 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 引入orm元数据，指定orm元数据所在的包路径，spring会自动读取包中的所有orm元素配置 --> 
		<property name="mappingDirectoryLocations" value="classpath:shun/domain"></property>  
	</bean>
	
	 
	<!-- 	注意：action对象作用范围一定是多例的，这样才符合struts2架构 -->
	<!-- userAction配置 -->
	<bean name="userAction" class="shun.action.UserAction" scope="prototype">
		<!-- 整合struts2与spring方案二需要手动组装依赖属性 -->
		<property name="userService" ref="userService"></property>
	</bean>
	<!-- userService配置 -->
	<bean name="userService" class="shun.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<!-- userDao配置 -->
	<bean name="userDao" class="shun.dao.impl.UserDaoImpl">
		<!-- 由于userDao继承了HibernateDaoSupport它依赖于sessionFactory，所以注入吧,ses+Alt+/有 -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- customerAction配置 -->
	<bean name="customerAction" class="shun.action.CustomerAction" scope="prototype">
		<!-- 整合struts2与spring方案二需要手动组装依赖属性 -->
		<property name="customerService" ref="customerService"></property>
	</bean>
	<!-- userService配置 -->
	<bean name="customerService" class="shun.service.impl.CustomerServiceImpl">
		<property name="customerDao" ref="customerDao"></property>
	</bean>
	<!-- userDao配置 -->
	<bean name="customerDao" class="shun.dao.impl.CustomerDaoImpl">
		<!-- 由于userDao继承了HibernateDaoSupport它依赖于sessionFactory，所以注入吧,ses+Alt+/有 -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 数据字典配置 -->
	<bean name="baseDictAction" class="shun.action.BaseDictAction"
		scope="prototype">
		<property name="baseDictService" ref="baseDictService"></property>
	</bean>
	<bean name="baseDictService" class="shun.service.impl.BaseDictServiceImpl">
		<property name="baseDictDao" ref="baseDictDao"></property>
	</bean>
	<bean name="baseDictDao" class="shun.dao.impl.BaseDictDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> 

	<!-- 联系人配置 -->
	<bean name="LinkMan" class="shun.action.LinkManAction" scope="prototype">
		<property name="linkManService" ref="linkManServiceImpl"></property>
	</bean>
	<bean name="linkManServiceImpl" class="shun.service.impl.LinkManServiceImpl">
		<property name="linkManDao" ref="linkManDaoImpl"></property>
	</bean>
	<bean name="linkManDaoImpl" class="shun.dao.impl.LinkManDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> 

	<!-- 客户拜访记录配置 -->
	<bean name="saleVisitAction" class="shun.action.SaleVisitAction" scope="prototype">
		<property name="saleVistService" ref="saleVisitServiceImpl"></property>
	</bean>
	<bean name="saleVisitServiceImpl" class="shun.service.impl.SaleVisitServiceImpl">
		<property name="saleVisitDao" ref="saleVisitDaoImpl"></property>
	</bean>
	<bean name="saleVisitDaoImpl" class="shun.dao.impl.SaleVisitDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> 
	
</beans>